// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

  model students {
  id          Int       @id @default(autoincrement())
  username    String       @unique
  password    String
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         String
  createdAt   DateTime     @default(now())
  birthday    DateTime
  enrollments Enrollment[]
  reviews     Review[]
  transactions Transaction[]
}



model AdminUser {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  role     String @default("admin")
  notifications Notification[]

  studentNotification studentNotification[]
}



model teacher {
  id        Int    @id @default(autoincrement())
  username  String    @unique
  password String
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       String
  createdAt DateTime  @default(now())
  courses   Course[]
  lessons   Lesson[]
  birthday  DateTime
}

model Course {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  description String?
  duration   Int        // Duration in minutes
  createdAt  DateTime   @default(now())
  teacherId  Int
  price Int
  teacher    teacher    @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]
  reviews     Review[]

  lessons    Lesson[]

  assignment assignment[]
}

model Enrollment {
  id          Int        @id @default(autoincrement())
  studentId   Int
  student     students    @relation(fields: [studentId], references: [id])
  courseId    Int
  course      Course     @relation(fields: [courseId], references: [id])
  enrolledAt  DateTime   @default(now())
  completedAt DateTime?
  status      String
  transactions Transaction[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  read      Boolean  @default(false)
  userId    Int
  user      AdminUser    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}


model studentNotification {
  id        Int      @id @default(autoincrement())
  message   String
  read      Boolean  @default(false)
  userId    Int
  user      AdminUser    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}



model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  startTime DateTime
  endTime   DateTime

  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  teacherId Int
  teacher   teacher  @relation(fields: [teacherId], references: [id])
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int      // Rating out of 5
  comment    String?
  createdAt  DateTime @default(now())

  studentId  Int
  student    students  @relation(fields: [studentId], references: [id])

  courseId   Int
  course     Course   @relation(fields: [courseId], references: [id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  amount      Float
  date        DateTime @default(now())
  paymentMethod String

  enrollmentId Int
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  studentId Int
  student students @relation(fields: [studentId],references: [id])
}


model Report {
  id          Int      @id @default(autoincrement())
  studentId   Int
  title       String
  report      String
  teacherName String?
  courseName  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  @@index([studentId]) // Index on studentId for faster queries
}



model announcement{
  id Int @id @default(autoincrement())
  heading String
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model assignment {
  id Int @id @default(autoincrement())
  title String
  body String
  points String
  dueDate DateTime
  courseId Int
  course Course @relation(fields: [courseId],references: [id])
}

model event{
  id Int @id @default(autoincrement())
  name String
  description String
  eventDate DateTime
  eventPlace String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



